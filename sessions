

Interviews : Takeaways .
reference : Narasimha Karumanchi , websites .

Tasks: go through every single function you can lay your eyes on.


make a folder ...code almost every single function from official docs.



Array :


-->declarations

-->manipulations  **

-->return statements


4- 1= 3


n - j= j

B[i]=A[n-i-1]



basic arithmetic operators :

+ -->increment..move forward
-   moving back
*   moving forward in leaps and bounds
/  moving backward in leaps and bounds

%  -> rotation  



0%3 = 0
1%3 = 1
2%3 = 2
3&3 = 0
      1
      2




0 1 2 0 1 2 0 1 2


3 4 5 0 1 2 



3 4 5 0 1 2 3 4 5 



Algortithm O(npow3)

for i : 0->n
	for j:i->n
		ans =INT_MIN
		for k:i->j(included)
			sum+=A[k]           sum=sum+A[k]
		ans=max(ans,sum)


Algorithm O(npow2)

for i: 0->n
	for : i->n
		sum+=A[j]
	ans=max(ans,sum)



anytime you want to optimize your code : 

-->more variables
-->more comparisons



......3 7 =10
......-3 7 
Algorithm O(n)

for i: 0->n
	sum=max(A[i],A[i]+sum)    // v difficult to think of
	ans =max(best,ans)

return ans



Tasks:
Arrays,lists,Al --functions and code


 Interview bit Array Math:

Min Steps in Infinite Grid 
Pascal Triangle 
Anti diagonals  

all 30 mins




SORTING :

-->

Q.................

-->sort --> c++ sort(A.begin(),A.end()) 

---------
if u remember the logic behind sort


---> get you more comfy with how to check where you are values are moving

** take the algo down in your notes...refer the algo or bullets points and reconstruct the code
-->bubble
-->selection
-->insertion   -->can you code making the inside loop a for loop
-->merge       -->recursion ---> how much is it troubling you
-->quick       -->pay attention to the partition
-->heap



sort --> O(n logn)   --> this automatically makes your whole code nlogn complex.



try to learn a sort function with O(n) complexity.


for : i : 1->n
	ans+=max(abs(A[i]-A[i-1]),abs(B[i]-B[i-1]))

return ans


i: 1-> NumOfRows
j: 1->i
R[i][j] = R[i-1][j-1]+R[i-1][j]


1*1 -->1
2*2 -->3
3*3 -->5

i+j =K = row number in final op

2N-1 = numof rows
res array size =2n-1

for i:0->n
	j:0->n

	 in R[i+j] insert A[i][j]

5 codes of sorting in arrays

Kth Row of Pascal's Triangle
set matrix 0 *
first missing integer *


flag variables 


-->flag -- indicator 

flag - 0/1 on/off toggle button


bool dont declare integer and then just use 0 and 1

1: 4 -->O(1)

array of flags : n: 4n   --> 500 unit of memory 


 without if : you cant toggle

states : interchangable and not mutually exclusive

0 0 0
0 0 0
0 0 0


two pointer approach


template :

Array, String 

 v1.................. v2



array , sorted 

n1+n2 = X

brute force : O(n pow 2)

for : i:0->n
	for : j : i+1->n

	if(A[i]+A[j]==X) done.

O(n) two pointer approach:

standard ( most frequently useful approach)
v1 = 0
v2 = n-1


while (standard condition v1<v2)
{
	if(A[v1]+A[v2]==X) done.

	else if (A[v1]+A[v2]>X) decrement v2.

	else increment v1
}


v1----------------->
				   <------------------------v2

counter variable :



PAYPALISHIRING


P   A  L
A   P  I  H
Y      S 

Repeat and Missing Number Array
N/3 Repeat Number
flip
max absolute difference



STRINGS :

-->official docs and pickup functions

-->apart from standard string functions try and implement general functions as well.

Things to remember :

setting, resetting strings  --every loop your string is being changed

cpp - stringstream
java -Scanner
python- ### google stringstream module for python


remove concept of interconversions

int->strings
string->int

the best way to interchange char and ascii value


-'0'

Interview point of view :

advantage c++ over java and python


11111111111111     inside if      22222222222222222222222222

count =9 and 1              count =1        count =15 and 2




PALINDROMES

-->Dynamic programming
	-->arrays
	-->strings -->4 models -->2 heavily depend on palindromes

-->common ones :
	1.reverse and compare
	2.two pointer approach
		i ---> mid <-------j
	3.for i 0->n/2
		A[i] and A[n-i-1]


3.
  string s="malaalamy"
  for : i:0->n/2  (n/2 or n/2 -1 or +1) (revise odd/even number properties)
  		if(A[i]!=A[n-i-1])
  			return false

  		return true;


uncommon approaches;

1. using stack

		malayalam
	-->push half the elements in stack 

	-->pop them one by one and check with the left over string

	time:O(n) space:O(n)

2. using recursion

	func check(string s)
		int l =s.len()

		//base case
		if(l==0|| l==1)
			return true

		if(s[0]==s[l-1])
			return check(s.substr(1,l-1))

		return false


recursion + control flow


string tricks : code all 5

c c c c c c c c c c c c c ...............................
o c o c o c o c o c o c o ...............................
o c c c o o.........................
      o

n - all monkeys with number which is a factor of n touch it.

9
1*9 1,3,9.
3*3

8
1,2,4,8.

4
1 2 4

16
1 2 4 8 16


MATH :

prime numbers  : factorization

base number system:

binary base  : hamming distance

2 types:

1
if mult 3 then fizz
elif mult 5 then buzz
elif mult 15 fizzbuzz


2
if mult 15 fizzbuzz
elif mult 3 then fizz
elif mult 5 then buzz

Distribute in Circle!
Is Rectangle?
Excel Column Number	
Excel Column Title
Greatest Common Divisor ( both iterative and recursive)


BIT MANIPULATION :

14 = 1 1 1 0

32 bit number

0000 0000 0000 1110


bitwise operators :

& 1&1 =1  

| 0|0 =0

^ diff bit then 1       1^0 or 0^1  

~ complement

<<  


int A=29 x=2
............................1 1 1               0 1
A>>x  = ? 7
>>

A>>x   div with x no of times
A<<x   multiply with 2 x no of times

bit tricks file :


x & (x-1) will clear the lowest set bit of x

8 & 7 =?

1 0 0 0                  0 1 1 1
 
0 1 1 1                  0 1 1 0 

-------------------------------------------
0 0 0 0                  0 1 1 0 ---> 0 1 0 0--->0 0 0 0 



x & ~(x-1) extracts the lowest set bit of x (all others are clear). Pretty patterns when applied to a linear sequence.

8 & ~(7) = ~(0111) = 1 0 0 0

1 0 0 0              0 1 1 1               

1 0 0 0              1 0 0 1
--------- -------------------------
1 0 0 0              0 0 0 1


00000000000000000000000001000000000000000000



x & (x + (1 << n)) = x, with the run of set bits (possibly length 0) starting at bit n cleared.
x & ~(x + (1 << n)) = the run of set bits (possibly length 0) in x, starting at bit n.
x | (x + 1) = x with the lowest cleared bit set.
x | ~(x + 1) = extracts the lowest cleared bit of x (all others are set).
x | (x - (1 << n)) = x, with the run of cleared bits (possibly length 0) starting at bit n set.
x | ~(x - (1 << n)) = the lowest run of cleared bits (possibly length 0) in x, starting at bit n are the only clear bits.


number of 1 bits

1.
  mod and divide 

2. 
  conversion : into string   // bitset

3. bit tricks
	counter=0;
	while(x!=0)
		x=x&(x-1)
		counter++

	return counter

4.
	32 bits 

	counter=0
	for(int i=0;i<32;i++)
	{
		if(A&(1<<i))
			counter++
	}
	return 


	xxxxxxxxxxxxxxxxxxxxxxxxxxxx
	1			

Trailing zeroes :

1. count and break

	count=0

	while A:
		if A&1 :
			break
		else
			count++

		A=A>>1
	return count


2. 32 bits
	for(..............)
		if(A&(1<<i)):
			return i


min XOR value

1. brute force
	all possible pairs
		minn=min((xor_pair_value),(minn))

	return min


0111 1000  4

1000 1001  1
2.
	sort
	for(............<n-1)
		minn=min((xor_A[i]_A[i+1]),(minn))
	return min


3.
	m=max(arr)
	r=arr[0]
	for i in arr:
   		if r^arr[i+1]<m:
      		r=r^arr[i+1]
      		m=arr[i]^arr[i+1]


complete bit manipulation as much as possible 


BINARY SEARCH :

int binaryS(int A[],int l, int r, int key)
	
	while(l<=r){                                                            
		int mid =l+(r-l)/2                                                


		if(A[mid]==key) **********************
			return mid

		if(A[mid]<key)  **********************
			l= mid+1

		else
			r = mid-1
	}

	return -1


---------------l-----------------r

int binaryS(int A[],int l, int r, int key)
	
	if(r>=l)
		int mid= l+(r-l)/2

	if(A[mid]==key)
		return mid

	if(A[mid]>key)
		return binaryS(A,l,mid-1,key)

	return binaryS(A,mid+1,r,key)

	return -1


visualise
setting limits


1->A integers

long l =1 

long r =A    A/2

long mid = l+(r-l)/2    start+end /2

if( mid*mid <=A && (mid+1)* (mid+1) >A)   ( not always possible)
	return mid

else if(mid*mid<A)
	l=mid+1

else
	r=mid-1


mid <A/mid

2+3 =5


11 -> 3


code binary search in iterative and recursive

sqaure root of integer

simple binary search and search answer sections


TWO POINTERS :

def pairSum(int A[], int N, int T)
{
	sort(A)
	int i =0
	int j = N-1

	while(i<j)
	{
		if(A[i]+A[j]==T)   //cond need to be solved
			return true

		//
		else if(A[i]+A[j]<T)
			i++;


		//
		else
			j--;

	}


}

A+B=X
B+A=X

A-B=X
B-A=X


LINKED LISTS :

-->TASK 1 :Functions :

-->VISUALISATION : print 

1) rough work


2)

LHS , RHS
 void reverse()
    {
        // Initialize current, previous and
        // next pointers
        Node* current = head;
        Node *prev = NULL, *next = NULL;
 
        while (current != NULL) {
            // Store next
            
 
            // Reverse current node's pointer
            
 
            // Move pointers one position ahead.
            
            current = next;       **
        }
        head = prev;
    }


prev = current;       **  A=B


next = current->next;  ** A=B->Y

current->next = prev;  ** A->Y=B

Current= prev->next


Two kinda pointers :

1) memory           :Structure

2) memoryless       :Flags


NULL pointers

while(NULL conditions)
if(NULL conditions)


curr!=null


curr : in assign statement
cur= curr->next



cur->next!=null

---------------------------

ListNode *curr,*prev,*next;
    curr=A;
    prev=NULL;
    while(curr!=NULL)
    {
        next=curr->next;
        curr->next=prev;
        prev=curr;
        curr=next;
    }
    A=prev;
    return A;


slow pointer and fast pointer :



Given a linked list how would you return the mid point :


1->2->7->8->6->5->4->9->0

hashmap




size? No -> length()  o(n)

length/2

for len/2  o(n)

wherever ur curr pointer is thats mid point


slow=slow->next->next (m times)
fast=fast->next->next->next(n times)


m:n ratio


1. detect cycle using two pointers
2. if exists take a temp(start) and run it with slow incrememnt with next
3. return the meet point
4. if cycle doesnt exit return null

t=new node(-1)

t->next= X

return t->next  (X)


A :1->4->7 currA  A: 7
B :2->3->5 currB  B:     Res : 1 2 3  4 5  7

when A and B are not empty ( currA and currB not null)
min  : compare currA and B and pick min and insert in res
		update currA and B

whatever is left : currA= currA->next and keep adding or do same thing with B

res : 1->2->3->4->5
----------------------------------------------

STACKS AND QUEUES :

--> For Trees and graphs ( not conceptually... OT wise)

--> standard problems

TASKS : implement stack and queues function


yin and yang:

stacks and recusrsion
stack calls on recursion


stack  FILO  depth      -depth first search   - recursion  - 

queue  FIFO  level      level order - breadth first search - iteration



Takeaways:

--> what to push?    
				   -->push value
Area = l*b ->A[i]*i
if you have index you can get value at any time using A[i]
-->push index 

--> when to pop

--------------------------------------------------------

dequeue : flexibility in insetion and removal


how is dequeue challenging : conditions for all insertions and removals(*2)


--------------------------------------------------------------------------



true -> 10 dollars

statement : i wont recieve 10 or 1000 dollars     --->T



20 21  22
1   2   4 =7  = 1 1 1

1   0  0

0  1  0

1  1  0

0  0  1

1 2 4 8  =15


Recursion :

-->base case

-->visualisation

-->building logic further


-----------------------------------------

-->ROUGH WORK

--> pick 10 questions : very basic ( 4-5 lines of code hardly) (fib, factorial)


iterative  code : identify the minimum unit




backtracking (2 steps)

1 step : make a choice

fn call

2 step : remove the choice


backtracking template :

function_R(A,B,C,D)
{
	//if(...................)
		{
			//base case
			//end result
		}


	else
	{
		iteration () //for //while   //making sure you make all possible choices
		{
			make a choice 
			function_R(A',B',C',D')
			remove the choice
		}

		//different version
		make choice 1
		function call
		remove choice 1
		make choice 2
		function call
		remove choice 2


	}
}
function(A,B)
{
	function_R(A,B,C,D)   //helper function
	//C,D required for recursion
}

main function()
{
	function(A,B) //function which carries basic things you need(A,B)

	//two choices
	1)a=fun

	2)func   //printing in the recursion function itself
}



cond 1 :(sum+(1*n)<=d_sum )

cond 2 :(sum+(6*n)>=d_sum)


*************************TREES************************************

-->think recursive

-->traversal and operations

-->linked list (making and breaking )


70 percent -->recursion

30 percent -->level order

TREES MAIN APPROACHES:


identifications : max , min, arithmetic relates query , recursion which involves both right and left subtree



-->left subtree , right subtree --> you have both the results available

skeleton :

return_type name(inputs)

	**base case : two types : --> remember for leaves or nulls?

----------------------------------------------------------------
	left call: check return, is it direct or do i need to store it?

	right call :check return, is it direct or do i need to store it?
----------------------------------------------------------------

main return statement : arithmetic or boolean or some comparsion

----------------------------------------------------------------


if(null)

if(R-->left==null)



//
{
	X=f(left)+f(right)
	Y=f(left)-f(right)


	l=f(left)
	r=f(right)
	X=l+r
	Y=l-r
}


void print_levelorder(TreeNode *node)
{
    TreeNode* temp=nullptr;
    queue<TreeNode *> q;
    if (!node)
        return;
    q.push(node);
    while (!q.empty())
    {
        temp=q.front();
        q.pop();
        cout<<temp->val<<" ";
        if(temp->left)
            q.push(temp->left);
        if(temp->right)
            q.push(temp->right);
    }
}

1.max element
 
 B:check null and return INT_MIN 
 R:max(root->val,root->left->val,root->right->val) return this.  

2. max element without recursion
	temp=q.front()
	maxx=max(maxx,temp)

3. find element recursion

	B: if val==root->val return 1

	R: return fun(root->left) ||fun(root->right)

		Accomodate 0?

4. find element without recursion
	val==q.front() return 1;
	return 0;

5. Insert element into Binary trees using rec
	********************************

6.size of binary tree recursion
	B: Null return 0;
	R: 1+ func(root->left)+fun(root->right)

7.size without recursion
	count++

8.while(!q.emp)
	



	stack.push(val)


while(!stack.empty)
	pop()

9.deleting a tree
	B: if root is null then return;

	R:	delete(left)
		delete(right)

		root=null

10. depth of tree

11. depth of tree without recursion
	if null :count++


12:deepest node in your binary tree
	last element in the Q


DYNAMIC PROGRAMMING :

-->Arrays and strings knowledge ...X

-->Recursion   X ----> Iteration 


--> One - Two trick   -Aptitiude


-->Memory ***



check if it exists
	
	susbstitiute

else
	go ahead with the fxn calls


Arrays : indices and find functions

HashMap : find , add ,remove

Dictionaries



i j X
fibonacci :
	1,1,2,3,5,8,13.............

	def fib(n):
		if n<=1:
			return n
		return fib(n-1)+fib(n-2)

----------------------------------------------
	T=dict()     top down

	def fib(n):
		if in T :
			find it return it
		if n not in T:
			if n<=1:
				
			else:
			T[n]=fib(n-1)+fib(n-2)
			return T[n]
---------------------------------------------------------------

T=n values []   bottom up

	def fib(n):
	T=n values []
	T[0]=1
	T[1]=1

	for(2->end)
		T[i]=T[i-1]+T[i-2]

	return T[n-1]

--------------------------------------------

	def fib(n):
		if n<=1:
			return n

		p,c =1,1
		for(2->end)
			new=p+c
			p=c
			c=new

		return c

---------------------------------------------
knapsack ubounded - 7 variations

knapsack bounded 

longest increasing subsequence

matrix chain multiplication

Misc -Trees

------------------------------------------------

bag : capacity : 10


weights --->Value


Goal : maximize the value for the bag


discrete knapsack ............. cant break the wt
------------> Unbounded ( with repition)  unlimited
------------> Bounded (without repition)  limited


wt={6,3,4,2} value={30,14,16,9}   capacity=10

n=4
val[3](9)+knpa(w,v,W-wt[n-1],3)
bounded 46

unbounded 48
	6+2+2

-----------------------------------------------------------
unbounded :


W  wi   ---->max(optimal knpasack(W-wi)+vi     //  optimal knapsack(W))



value(u) be the maximum value a knapsack can achieve with weight u


value(u)=    max{value(u-wi)+vi}
			i:wi<W

T[][]

def knap(wt,val,W,n): 
	
	if n==0 or W==0:
		return 0

	if(t[n][W]!=-1)
		return t[n][W]

	if(wt[n-1]>W):
		t[n][W]=knap(W,wt,val,n-1)


	else :
		 t[n][W]= max(val[n-1]+knap(W-wt[n-1],wt,val,n),knap(W,wt,val,n-1))


what to store ? value

how to store ? ? n,W


n-->i
w-->j


for i=1->end
	for 1->end
	if(n-)

def knap(wt,val,W,n): 
	
	//if n==0 or W==0:
	//	return 0

for i:1->end
	for j:1->end
		if(wt[i-1]>W):
			t[i][j]=t[i-1][j]


		else :                    
		 	t[i][j]= max(val[i-1]+t[i][j-wt[i-1]],t[i-1][j])



		 	return T[n][W]


knapsack templates :

->YES/NO choice

-->limiter ( capacity) 

-->maximize something



knapsack : wt,value, capacity        -->return max.value

		numbers, sum                -->bool true or false    ||

		-->make two choice one with ur elt one without it, check if either subset gets you to the sum.

		numbers, sum                -->int count    

		-->make two choice one with ur elt one without it, count possiblities in both cases. add both of them.





			7 2 1 3 8 4 9 1 2 6 5 9 3 8 1


LIS(i) optimal len of an LIS ending at A[i]

A[]
LIS(i)=1+max{LIS(j) j<i ,A[j]<A[i]}


LIS(0)=1


recursive (memoization)

T

def lis(A,i)
	
	if i not in T:
		T[i]=1
	for( j in range i)
		if(A[j]<A[i]):
			T[i]=max(T[i],lis(A,j)+1)
	
	return T[i]


 def lis(A)

 T=[Null]*len(A)

 for i in range(len(A)):
 	T[i]=1
 	for j in range i:
 		if A[j]<A[i] and T[i]<T[j]+1:
 			T[i]=T[j]+1


 	return max(T)


chess piece  -->

Longest common subsequence 

“AGGTAB” 

“GXTXAYB”




def lcs (A,B,m,n)
	
	if m==0 or n==0
		return 0

	if A[m-1]==B[n-1]

		1+lcs(A,B,m-1,n-1)

	else
		max(lcs(A,B,m,n-1),lcs(A,B,m-1,n))



ABCDEF

BCDE


string A

longest subsequence which is a palindrome

lcs(A, rev(A))



list out all variables 

recursion based 

knapsack
	some comparison b/w two function calls
	-->what am i calling it on f(A,B,C,D)    f(A,B*,C,D*)

LIS
LCS

EDIT DISATNCE : 


Two Strings

A--->B


EDITING

remove E

DITING

insert S

DISTING

replace i with A

DISTANG

replace G with C

DISTANC

insert E

DISTANCE



A[0.....n-1]   

B[0.....m-1]   


Insertion :

A[0....n-1]	    	-         1
B[0....m-2]       B[m-1]


Deletion :

A[0....n-2]	    	A[n-1]    1
B[0....m-1]       	-

Match/Mismatch

A[0....n-2]	    	A[n-1]    1(if mismatch)
B[0....m-2]       	B[m-1]



edit_distance (a,b,m,n):

k=0 if match, 1 if mismatch


min{	edit_distance(a,b,m-1,n)+1
		edit_distance(a,b,m,n-1)+1
		edit_distance(a,b,m-1,n-1)+K
	}



EDITING
DISTANCE


EDITIN          G
DISTANCE


EDITING
DISTANC         E

EDITIN          G
DISTANC         E



reconstruct solution



MATRIX CHAIN MULTIPLICATION

A*B =B*A

Ax(BxC) =(AxB)xC

A* B*C *D

A × ((B × C) × D)

A=50*20
B=20*1
C=1*10
D=10*100


20*1*10

20*10*100

50*20*100

(A × B) × (C × D)

50*20*1+1*10*100+50*1*100


let M(i,j) be min cost of computing Ai*.......Aj-1

M(2,6)=A2*A3*A4*A5



M(i,j)= min{M(i,k)+M(k,j)+mi.mk.mj} i<k<j


n=size of(m)
matrix_mult(m,i,j)

for k :i+1->j

min()


GRAPHS :


to do : how to store graphs ?
		adjaceny matrix
		adjaceny list


BFS :


Template :


directions :


X[]={-1, -1, -1, 0, 0, 1, 1, 1}
Y[]={-1, 0, 1, -1, 1, -1, 0, 1}

8 directions 


4 direction 

safe condition : ***** you do this before moving to the step

bool fxn sign(grid,int r,int c)
	r>=0&&r<graph.size()&&c>=0&&c<graph[0].size()


void DFS(vector<vector<int>>&graph,int r,int c)
{
    // cout<<r<<" "<<c<<endl;
    graph[r][c]=1;
    for (int k = 0; k < 8; ++k) 
        if (isSafe(graph, r+X[k], c+Y[k])) 
                DFS(graph,r+X[k], c+Y[k]); 

}
